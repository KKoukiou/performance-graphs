#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib


class TestApplication(testlib.MachineCase):
    def testBasic(self):
        b = self.browser
        m = self.machine

        m.execute("systemctl start pmlogger")

        self.login_and_go("/performance-graphs")
        # eventually finishes data loading and shows heading
        b.wait_in_text(".metrics-history", "Events")
        b.wait_in_text(".metrics-history", "CPU")
        b.wait_present(".metrics-hour .metrics-data-cpu")

        # only shows current hour
        b.wait_js_func("ph_count_check", ".metrics-hour", 1)

        # VM just started, we don't have 12 hours of data
        b.wait_in_text(".metrics .pf-c-alert", "No data available between")
        # initial data gap is < 24 hours, does not show date
        year = m.execute("date +%Y").strip()
        self.assertNotIn(year, b.text(".metrics .pf-c-alert"))

        # can try to load earlier data; only updates "no data" alert as there is no data
        b.wait_text(".bottom-panel button", "Load earlier data")
        b.click(".bottom-panel button")
        # now the gap is > 24 hours, does show date
        b.wait_in_text(".metrics .pf-c-alert", year)
        # still only one hour
        b.wait_js_func("ph_count_check", ".metrics-hour", 1)

    @testlib.nondestructive
    def testNoData(self):
        b = self.browser
        m = self.machine

        m.execute("systemctl stop pmlogger && mount -t tmpfs tmpfs /var/log/pcp/pmlogger")
        self.addCleanup(m.execute, "umount /var/log/pcp/pmlogger")

        self.login_and_go("/performance-graphs")
        b.wait_in_text(".pf-c-empty-state", "Metrics could not be loaded")
        # Troubleshoot
        b.click(".pf-c-empty-state button.pf-m-link")
        b.enter_page("/system/services")
        b.wait_in_text("#service-details", "pmlogger.service")

    @testlib.nondestructive
    def testNoCockpitPcp(self):
        b = self.browser
        m = self.machine

        m.execute("mount -t tmpfs tmpfs /usr/share/cockpit/pcp")
        self.addCleanup(m.execute, "umount /usr/share/cockpit/pcp")

        self.login_and_go("/performance-graphs")
        b.wait_in_text(".pf-c-empty-state", "cockpit-pcp is missing")
        b.click(".pf-c-empty-state button.pf-m-primary")
        # this button does not yet do anything


if __name__ == '__main__':
    testlib.test_main()
